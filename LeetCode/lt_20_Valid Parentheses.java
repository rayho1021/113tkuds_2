/*
題目：Valid Parentheses
判斷字串中的括號是否有效配對。有效條件：
1.左括號必須被相同類型的右括號關閉
2.左括號必須以正確的順序關閉
3.每個右括號都有對應的左括號
範例：s = "()" → true, s = "()[]{}" → true, s = "(]" → false
*/

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>(); // 堆疊儲存左括號
        
        // 遍歷字串中的每個字元
        for (char c : s.toCharArray()) {
            // 遇到左括號時，將其推入堆疊，遇到右括號時，檢查是否與堆疊頂部的左括號匹配
            if (c == '(' || c == '[' || c == '{') {  
                stack.push(c); 
            }
            else if (c == ')' || c == ']' || c == '}') {
                if (stack.isEmpty()) {  // 如果堆疊為空 = 沒有對應的左括號
                    return false;
                }
                
                char top = stack.pop(); // 彈出堆疊頂部的左括號
                
                // 檢查括號類型是否匹配
                if ((c == ')' && top != '(') ||
                    (c == ']' && top != '[') ||
                    (c == '}' && top != '{')) {
                    return false; 
                }
            }
        }
        // 最終堆疊必須為空，表示所有左括號都有對應的右括號
        return stack.isEmpty();
    }
}

/*
解題思路：
1. 使用 Stack 堆疊來追蹤尚未配對的左括號。
2. 堆疊的後進先出特性，正好符合括號配對的順序要求。
3. 處理邏輯：
  - 遇到左括號：推入堆疊，等待後續的右括號來配對
  - 遇到右括號：與堆疊頂部的左括號檢查配對
4. 確保右括號與最近的未配對左括號類型相同。
5. 邊界條件：
  - 遇到右括號但堆疊為空：缺少對應的左括號
  - 括號類型不匹配
  - 字串結束時堆疊不為空：有多餘的左括號
6. 只有當所有括號都正確配對且順序正確時，最後堆疊才會為空。
*/